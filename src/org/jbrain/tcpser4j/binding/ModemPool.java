// autogenerated from SchemaBinder

package org.jbrain.tcpser4j.binding;

/**
 * Title: ModemPool
 * Description: Description of the class
 * @author SchemaBinder
 * @version 1.0
 * 
 */

public class ModemPool implements java.io.Serializable {
    private static final String sObjName="ModemPool";
    private Line _oLine=null;
    private ModemInfo _oTemplateModem=null;
    private java.util.ArrayList _oModem=new java.util.ArrayList();


    public ModemPool() {
    }

     /**
      * Title: ModemPool
      * Description: Description of the constructor
      * 
      */

    public ModemPool(org.dom4j.Element el) throws Exception {
        this();
        readXML(el);
    }

    public Line getLine() {
        return _oLine;
    }

    public void setLine(Line o) {
        _oLine = o;
    }

    public ModemInfo getTemplateModem() {
        return _oTemplateModem;
    }

    public void setTemplateModem(ModemInfo o) {
        _oTemplateModem = o;
    }

    public ModemInfo getModem(int idx) {
        return (ModemInfo)_oModem.get(idx);
    }

    public java.util.ArrayList getModemList() {
        return _oModem;
    }

    public int getModemSize() {
        return _oModem.size();
    }

    public void addModem(ModemInfo o) {
        _oModem.add(o);
    }

    public void setModem(int idx, ModemInfo o) {
        _oModem.add(idx,o);
    }


     /**
      * Title: validate
      * Description: Description of the method
      * 
      */

    public boolean validate() throws Exception {
        return true;
    }

     /**
      * Title: readXML
      * Description: Parses XML into Object instance
      * 
      */

    public void readXML(org.dom4j.Element el) throws Exception {
        String name,value;
        org.dom4j.Element node=el;

        java.util.Iterator i = el.elementIterator();
        while (i.hasNext()) {
            node = (org.dom4j.Element) i.next();
            name = node.getName();
            if (name.equals("Line"))
                setLine(new Line(node));
            if (name.equals("TemplateModem"))
                setTemplateModem(new ModemInfo(node));
            if (name.equals("Modem"))
                addModem(new ModemInfo(node));
        }
    }

     /**
      * Title: writeXML
      * Description: Creates XML from Object instance
      * 
      */

    public org.dom4j.Element writeXML() throws Exception {
        return writeXML(sObjName);
    }

     /**
      * Title: writeXML
      * Description: Creates XML from Object instance
      * 
      */

    public org.dom4j.Element writeXML(String name) throws Exception {
        org.dom4j.Element el = org.dom4j.DocumentHelper.createElement(name);

        if(getLine() != null)
            el.add(getLine().writeXML("Line"));
        if(getTemplateModem() != null)
            el.add(getTemplateModem().writeXML("TemplateModem"));
        for(int idx = 0,size = getModemSize();idx<size;idx++)
            el.add(getModem(idx).writeXML("Modem"));
        return el;
    }

}
