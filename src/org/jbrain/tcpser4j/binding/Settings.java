// autogenerated from SchemaBinder

package org.jbrain.tcpser4j.binding;

/**
 * Title: Settings
 * Description: Description of the class
 * @author SchemaBinder
 * @version 1.0
 * 
 */

public class Settings implements java.io.Serializable {
    private static final String sObjName="Settings";
    private PhoneBook _oPhoneBook=null;
    private java.util.ArrayList _oModemPool=new java.util.ArrayList();


    public Settings() {
    }

     /**
      * Title: Settings
      * Description: Description of the constructor
      * 
      */

    public Settings(org.dom4j.Element el) throws Exception {
        this();
        readXML(el);
    }

    public PhoneBook getPhoneBook() {
        return _oPhoneBook;
    }

    public void setPhoneBook(PhoneBook o) {
        _oPhoneBook = o;
    }

    public ModemPool getModemPool(int idx) {
        return (ModemPool)_oModemPool.get(idx);
    }

    public java.util.ArrayList getModemPoolList() {
        return _oModemPool;
    }

    public int getModemPoolSize() {
        return _oModemPool.size();
    }

    public void addModemPool(ModemPool o) {
        _oModemPool.add(o);
    }

    public void setModemPool(int idx, ModemPool o) {
        _oModemPool.add(idx,o);
    }


     /**
      * Title: validate
      * Description: Description of the method
      * 
      */

    public boolean validate() throws Exception {
        return true;
    }

     /**
      * Title: readXML
      * Description: Parses XML into Object instance
      * 
      */

    public void readXML(org.dom4j.Element el) throws Exception {
        String name,value;
        org.dom4j.Element node=el;

        java.util.Iterator i = el.elementIterator();
        while (i.hasNext()) {
            node = (org.dom4j.Element) i.next();
            name = node.getName();
            if (name.equals("PhoneBook"))
                setPhoneBook(new PhoneBook(node));
            if (name.equals("ModemPool"))
                addModemPool(new ModemPool(node));
        }
    }

     /**
      * Title: writeXML
      * Description: Creates XML from Object instance
      * 
      */

    public org.dom4j.Element writeXML() throws Exception {
        return writeXML(sObjName);
    }

     /**
      * Title: writeXML
      * Description: Creates XML from Object instance
      * 
      */

    public org.dom4j.Element writeXML(String name) throws Exception {
        org.dom4j.Element el = org.dom4j.DocumentHelper.createElement(name);

        if(getPhoneBook() != null)
            el.add(getPhoneBook().writeXML("PhoneBook"));
        for(int idx = 0,size = getModemPoolSize();idx<size;idx++)
            el.add(getModemPool(idx).writeXML("ModemPool"));
        return el;
    }

}
